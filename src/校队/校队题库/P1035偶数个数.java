package 校队.校队题库;

// 前缀和（模拟蓝桥杯填空）
public class P1035偶数个数 {
    public static void main(String[] args) {
        String str = "95 49 62 62 46 86 16 21 25 4 9 59 82 45 12 24 75 79 19 95 50 3 92 15 19 75 93 32 29 36 57 78 62 72 46 " +
                "2 18 64 89 86 23 6 57 54 69 78 51 80 77 1 3 21 56 97 50 71 20 33 98 10 75 6 94 7 90 72 44 71 7 55 85 0 1 59 " +
                "86 20 92 28 72 76 53 98 49 19 96 27 77 74 81 89 95 28 95 60 81 56 21 47 73 95 78 36 29 37 94 56 95 7 87 77 46 " +
                "52 78 98 99 66 34 4 31 26 6 5 71 19 24 40 80 9 87 92 92 70 72 44 3 83 62 46 61 39 2 6 79 4 63 0 10 86 5 81 6 " +
                "46 2 43 41 74 95 27 83 17 44 21 69 96 58 50 70 39 58 75 37 49 95 4 9 42 89 88 24 9 80 11 2 16 24 73 79 50 58 " +
                "58 1 7 99 23 1 8 7 38 93 65 49 66 28 92 27 14 95 90 38 5 36 23 52 1 50 97 49 47 93 56 4 28 25 54 11 8 54 23 " +
                "6 99 100 0 59 43 78 26 60 73 24 84 67 28 81 83 8 69 42 86 48 100 4 47 18 71 34 15 61 26 50 15 89 11 23 32 15 " +
                "94 44 34 86 76 26 33 17 80 35 59 74 22 96 11 61 32 51 44 49 88 25 37 24 92 4 71 53 57 86 18 15 48 54 2 25 63 41 " +
                "59 5 27 30 79 38 17 41 60 74 41 6 88 84 15 16 47 98 60 35 38 52 92 73 39 46 85 3 55 34 81 90 85 46 86 83 54 86 " +
                "25 0 100 1 66 89 26 46 6 89 45 64 42 41 0 47 89 31 69 22 53 58 37 2 75 99 60 60 42 61 27 37 7 89 86 90 63 9 28 " +
                "98 4 10 74 45 98 34 76 3 98 41 16 49 71 64 55 48 98 83 91";

        String[] strings = str.split(" ");
//        System.out.println(strings.length); // 400

        int[][] arr = new int[21][21];
        int index = 0;
        // 二维数组的下标从1开始
        for (int i = 1; i < 21; i++) {
            for (int j = 1; j < 21; j++) {
                arr[i][j] = Integer.parseInt(strings[index++]);
            }
        }

        // 二维前缀和（不是子矩阵）
        int [][] prefix = new int[21][21];
        for (int i = 1; i < 21; i++) {
            for (int j = 1; j < 21; j++) {
                prefix[i][j] = prefix[i-1][j] + prefix[i][j-1] - prefix[i-1][j-1] + arr[i][j];
            }
        }

        // 统计和为偶数的子矩阵数量
        int count = 0;
        for (int i1 = 1; i1 < 21; i1++) {
            for (int j1 = 1; j1 < 21; j1++) {
                for (int i2 = i1; i2 < 21; i2++) {
                    for (int j2 = j1; j2 < 21; j2++) {
                        int sum = prefix[i2][j2] - prefix[i1-1][j2] - prefix[i2][j1-1] + prefix[i1-1][j1-1];
                        if (sum % 2 == 0) {
                            count++;
                        }
                    }
                }
            }
        }

        System.out.println(count); // 22308
    }
}
