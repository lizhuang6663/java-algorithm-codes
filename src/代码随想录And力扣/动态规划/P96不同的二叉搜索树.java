package 代码随想录And力扣.动态规划;

// 动态规划
// 力扣：https://leetcode.cn/problems/unique-binary-search-trees/description/

public class P96不同的二叉搜索树 {
    // dp[3]，就是 元素1为头结点搜索树的数量 + 元素2为头结点搜索树的数量 + 元素3为头结点搜索树的数量
    //元素1为头结点搜索树的数量 = 右子树有2个元素的搜索树数量 * 左子树有0个元素的搜索树数量
    //元素2为头结点搜索树的数量 = 右子树有1个元素的搜索树数量 * 左子树有1个元素的搜索树数量
    //元素3为头结点搜索树的数量 = 右子树有0个元素的搜索树数量 * 左子树有2个元素的搜索树数量
    //有2个元素的搜索树数量就是dp[2]。
    //有1个元素的搜索树数量就是dp[1]。
    //有0个元素的搜索树数量就是dp[0]。
    //所以dp[3] = dp[2] * dp[0] + dp[1] * dp[1] + dp[0] * dp[2]


    // dp[i]的含义：1到i为节点组成的二叉搜索树的个数为dp[i]。

    // dp[i] += dp[以j为头结点左子树节点数量] * dp[以j为头结点右子树节点数量]
    // j相当于是头结点的元素，从1遍历到i为止。
    // 递推公式：dp[i] += dp[j - 1] * dp[i - j],j-1 为j为头结点左子树节点数量，i-j 为以j为头结点右子树节点数量
    // 时间复杂度：O(n^2)  空间复杂度：O(n)
    public int numTrees(int n) {
        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = 1;

        for (int i = 2; i <= n; i++) {
            for (int j = 1; j <= i; j++) { // j相当于是头结点的元素，从1遍历到i为止。
                //对于第i个节点，需要考虑1作为根节点直到i作为根节点的情况，所以需要累加
                //一共i个节点，对于根节点j时,左子树的节点个数为j-1，右子树的节点个数为i-j
                dp[i] += dp[j - 1] * dp[i - j];
            }
        }
        return dp[n];
    }
}
